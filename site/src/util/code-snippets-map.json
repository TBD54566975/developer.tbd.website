{
  "createMyDid": "const myDid = await web5.did.create('ion');",
  "getProtocolDefinition": "const { protocol } = await web5.dwn.protocols.configure({\r\n    message: {\r\n      definition: protocolDefinition\r\n    }\r\n  });\r\n\r\n  //highlight-start\r\n  const definition = protocol.definition;\r\n  //highlight-end",
  "configureProtocolAndSend": "const { protocol } = await web5.dwn.protocols.configure({\r\n    message: {\r\n      definition: protocolDefinition\r\n    }\r\n  });\r\n\r\n \r\n  //highlight-start\r\n  const {status} = await protocol.send(myDid);\r\n  //highlight-end",
  "queryProtocol": "const { protocols } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'http://social-media.xyz'\r\n      }\r\n    }\r\n  });\r\n\r\n  //highlight-start\r\n  const protocolConfig = protocols[0].toJSON();\r\n  //highlight-end",
  "configureProtocolWithDefinition": "const { protocol, status } = await web5.dwn.protocols.configure({\r\n    message: {\r\n      definition: {\r\n        protocol: 'https://photos.org/protocol',\r\n        published: false,\r\n        types: {\r\n          album: {\r\n            schema: 'https://photos.org/protocol/album',\r\n            dataFormats: ['application/json'],\r\n          },\r\n          photo: {\r\n            schema: 'https://photos.org/protocols/photo',\r\n            dataFormats: ['application/json'],\r\n          },\r\n          binaryImage: {\r\n            dataFormats: ['image/png', 'jpeg', 'gif'],\r\n          },\r\n          comment: {\r\n            schema: 'https://photos.org/protocols/comment',\r\n            dataFormats: ['application/json'],\r\n          },\r\n        },\r\n        structure: {\r\n          album: {\r\n            $actions: [\r\n              {\r\n                //author of album can write\r\n                who: 'author',\r\n                of: 'album',\r\n                can: 'write',\r\n              },\r\n            ],\r\n          },\r\n          photo: {\r\n            $actions: [\r\n              {\r\n                //recipeint of photo can read\r\n                who: 'recipient',\r\n                of: 'photo',\r\n                can: 'read',\r\n              },\r\n            ],\r\n            binaryImage: {\r\n              $actions: [\r\n                {\r\n                  //author of photo can write\r\n                  who: 'author',\r\n                  of: 'photo',\r\n                  can: 'write',\r\n                },\r\n              ],\r\n            },\r\n            comment: {\r\n              $actions: [\r\n                {\r\n                  //anyone can write a comment\r\n                  who: 'anyone',\r\n                  can: 'write',\r\n                },\r\n                {\r\n                  //anyone can read a comment\r\n                  who: 'anyone',\r\n                  can: 'read',\r\n                },\r\n              ],\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });",
  "queryMusicProtocol": "const { protocols, status } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'https://music.org/protocol',\r\n      },\r\n    },\r\n  });\r\n\r\n  // logs an array of protocol configurations installed on the user's DWN\r\n  console.log(protocols);",
  "queryProtocolDescending": "// Sorting protocols by dateCreated in descending order\r\n\r\n  const { protocols, status } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'http://social-media.xyz',\r\n      },\r\n      //highlight-start\r\n      dateSort: 'createdDescending',\r\n      //highlight-end\r\n    },\r\n  });",
  "queryProtocolsFromDid": "//Query protocol on someone else's DWN\r\n  \r\n  const { protocols } = await web5.dwn.protocols.query({\r\n    //highlight-start\r\n    from: bobDid,\r\n    //highlight-end\r\n    message: {\r\n      filter: {\r\n        protocol: 'https://music.org/protocol',\r\n      },\r\n    },\r\n  });\r\n\r\n  // logs an array of protocol configurations installed on Bob's DWN\r\n  console.log(protocols);",
  "createRecordWithHighlight": "const { record } = await web5.dwn.records.create({\r\n    data: 'Hello World!',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });\r\n\r\n  //highlight-start\r\n  const { status } = await record.send(myDid);\r\n  //highlight-end",
  "createRecord": "const { record } = await web5.dwn.records.create({\r\n    data: 'Hello World!',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });\r\n\r\n  const { status } = await record.send(myDid);",
  "readRecord": "const recordText = await textRecord.data.text();",
  "deleteRecord": "const response = await web5.dwn.records.delete({\r\n    from: did,\r\n    message: { recordId },\r\n  });",
  "updateRecord": "const response = await record.update({ data: \"Hello', I'm updated\" });",
  "createRecordsWithPlaylist": "const { record } = await web5.dwn.records.create({\r\n    data: playlistJson,\r\n    message: {\r\n      recipient: 'did:example:alice',\r\n      schema: 'https://schema.org/Playlist',\r\n      dataFormat: 'application/json',\r\n    },\r\n  });",
  "createRecordWithoutStore": "// this creates a record, but does not store it in the user's local DWN\r\n  const { record } = await web5.dwn.records.create({\r\n    //highlight-start\r\n    store: false,\r\n    //highlight-end\r\n    data: 'Hello again, World!',\r\n    message: {\r\n      recipient: 'did:example:alice',\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });",
  "createRecordAndSend": "// this creates a record and stores it in the user's local DWN\r\n  const { record } = await web5.dwn.records.create({\r\n    data: 'Hello World!',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });\r\n\r\n  /*\r\n  send the record to the user's remote DWNs. Only needed\r\n  if it's a record that cannot wait for sync to occur.\r\n  */\r\n  const { status: myDidStatus } = await record.send(myDid);\r\n\r\n  // send the newly generated record to Bob's DWNs\r\n  const { status: bobStatus } = await record.send(bobDid);",
  "queryPlaylistFromDid": "const response = await web5.dwn.records.query({\r\n    from: myDid,\r\n    message: {\r\n      filter: {\r\n        schema: 'https://schema.org/Playlist',\r\n        dataFormat: 'application/json',\r\n      },\r\n    },\r\n  });\r\n\r\n  // response.records.forEach((record) => {\r\n  //   console.log(record.id);\r\n  // });",
  "sortQueriedRecordsByDate": "// Sorting records by dateCreated in ascending order\r\n  const response = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        dataFormat: 'text/plain',\r\n      },\r\n      //highlight-start\r\n      dateSort: 'createdAscending',\r\n      //highlight-end\r\n    },\r\n  });",
  "readRecordFromId": "// Reads the indicated record from the user's DWNs\r\n  let { record } = await web5.dwn.records.read({\r\n    message: {\r\n      filter: {\r\n        recordId: recordId,\r\n      },\r\n    },\r\n  });\r\n\r\n  // assuming the record has a text payload\r\n  const text = await record.data.text();",
  "readRecordByIdFromDid": "// Reads the indicated record from Bob's DWNs\r\n  const { record } = await web5.dwn.records.read({\r\n    //highlight-start\r\n    from: bobDid,\r\n    //highlight-end\r\n    message: {\r\n      filter: {\r\n        recordId: recordId,\r\n      },\r\n    },\r\n  });\r\n\r\n  // assuming the record is a json payload\r\n  const data = await record.data.json();",
  "deleteRecordFromDid": "const response = await web5.dwn.records.delete({\r\n    //highlight-next-line\r\n    from: did,\r\n    message: {\r\n      recordId: record.id,\r\n    },\r\n  });",
  "connectWithDWNEndpoint": "const { web5, did } = await Web5.connect({\r\n  techPreview: {\r\n    dwnEndpoints: [\"https://dwn.your-domain.org/\"]\r\n  },\r\n});",
  "connectWithAgentAndConnectedDid": "const {web5, did} = await Web5.connect({\r\n  agent: identityAgent,\r\n  connectedDid: existingDid\r\n});",
  "connectWithSyncConfig": "const {web5, did} = await Web5.connect({\r\n  sync: '5s'\r\n});",
  "createRecordWithTodoItem": "const myRecord = await web5.dwn.records.create(myDid.id, {\r\n    data: 'todoItem',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });",
  "createAliceDid": "const { web5, did: aliceDid } = await Web5.connect();\r\n\r\n  // Create the record\r\n  const { record } = await web5.dwn.records.create({\r\n    data: 'Hello Web5',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });\r\n\r\n  // Read the record\r\n  const readResult = await record.data.text();",
  "createDidAutomatically": "const { web5, did: myDid } = await Web5.connect();",
  "deleteFromLocalDWN": "//Query records with plain text data format\r\n  const response = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        recordId: recordId,\r\n      },\r\n    },\r\n  });\r\n\r\n  // Grab the first indexed record\r\n  const record = response.records[0];\r\n\r\n  // Delete the record\r\n  const deleteResult = await web5.dwn.records.delete({\r\n    message: {\r\n      recordId: recordId\r\n    },\r\n  });",
  "createPublishedRecord": "const {record} = await web5.dwn.records.create({\r\n    data: \"a published record\",\r\n    message: {\r\n      dataFormat: \"text/plain\",\r\n      //highlight-start\r\n      published: true\r\n      //highlight-end\r\n    }\r\n  });",
  "createRecordWithDatePublished": "// Create a new Date instance for tomorrow\r\nconst today = new Date();\r\nconst tomorrow = new Date(today);\r\ntomorrow.setDate(today.getDate() + 1);\r\n\r\n// Format the date and time in YYYY-MM-DDThh:mm:ss.ssssssZ format\r\nconst formattedDate = tomorrow.toISOString().replace(/\\.\\d{3}Z$/, '.000000Z');\r\n\r\n// Create a record today to be published tomorrow\r\nconst { record } = await web5.dwn.records.create({\r\n  data: \"This record will be created now and published tomorrow\",\r\n  message: {\r\n    dataFormat: \"text/plain\",\r\n    //highlight-start\r\n    published: true,\r\n    datePublished: formattedDate\r\n    //highlight-end\r\n  },\r\n});",
  "queryProtocolsForMusic": "const { protocols } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'https://music.org/protocol',\r\n      },\r\n    },\r\n  });",
  "queryProtocolsWithFilterDescending": "const { protocols } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'http://social-media.xyz',\r\n      },\r\n      //highlight-next-line\r\n      dateSort: 'createdDescending'\r\n    },\r\n  });",
  "queryRecordsWithFilterAscending": "const response = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        dataFormat: 'text/plain',\r\n      },\r\n      //highlight-next-line\r\n      dateSort: 'publishedAscending',\r\n    },\r\n  });",
  "queryRecordsFromDid": "const { records } = await web5.dwn.records.query({\r\n    from: did,\r\n    message: {\r\n      filter: {\r\n        schema: 'https://schema.org/Playlist',\r\n        dataFormat: 'application/json',\r\n      },\r\n    },\r\n  });",
  "queryRecordWithParentId": "const response = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        parentId: 'bafyreianzpmhbgcgam5mys722vnsiuwn7y4ek6kjeyjptttquasw4hge2m',\r\n      },\r\n    },\r\n  });",
  "playlistProtocolDefinition": "const playlistProtocolDefinition =  {\r\n    protocol: \"https://playlist.org/protocol\",\r\n    published: true,\r\n    types: {\r\n      playlist: {\r\n        schema: \"https://schema.org/MusicPlaylist\",\r\n        dataFormats: [\"application/json\"],\r\n      },\r\n      audio: {\r\n        schema: \"https://schema.org/AudioObject\",\r\n        dataFormats: [\"audio/mp3\"],\r\n      },\r\n      video: {\r\n        schema: \"https://schema.org/VideoObject\",\r\n        dataFormats: [\"video/mp4\"],\r\n      },\r\n    },\r\n    structure: {\r\n      playlist: {\r\n        $actions: [\r\n          { who: \"anyone\", can: \"write\" },\r\n          { who: \"author\", of: \"playlist\", can: \"read\" },\r\n          { who: \"recipient\", of: \"playlist\", can: \"read\" },\r\n        ],\r\n        audio: {\r\n          $actions: [\r\n            { who: \"anyone\", can: \"write\" },\r\n            { who: \"author\", of: \"audio\", can: \"read\" },\r\n            { who: \"recipient\", of: \"audio\", can: \"read\" },\r\n          ],\r\n        },\r\n        video: {\r\n          $actions: [\r\n            { who: \"anyone\", can: \"write\" },\r\n            { who: \"author\", of: \"video\", can: \"read\" },\r\n            { who: \"recipient\", of: \"video\", can: \"read\" },\r\n          ]\r\n        },\r\n      },\r\n    }\r\n  };",
  "queryFromDwnByProtocolPath": "const { records } = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        //highlight-start\r\n        protocol: 'https://playlist.org/protocol',\r\n        protocolPath: 'playlist/video'\r\n        //highlight-end\r\n      },\r\n    },\r\n  });",
  "readFromDwn": "const response = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        dataFormat: 'text/plain',\r\n      },\r\n    },\r\n  });",
  "createLocalRecord": "const { record } = await web5.dwn.records.create({\r\n    data: \"this record will be written to the local DWN\",\r\n    message: {\r\n        dataFormat: 'text/plain'\r\n    }\r\n});",
  "createLocalProtocol": "const response = await web5.dwn.protocols.configure({\r\n    message: {\r\n        definition: protocolDefinition\r\n    }\r\n});",
  "sendLocalRecordToTarget": "const { record } = await web5.dwn.records.create({\r\n    data: \"this record will be written to the target's local DWN\",\r\n    message: {\r\n        target: targetDid,\r\n        dataFormat: 'text/plain'\r\n    }\r\n});",
  "sendRecordToRemoteDWNs": "const { record } = await web5.dwn.records.create({\r\n    data: \"this record will be written to the local DWN\",\r\n    message: {\r\n        dataFormat: 'text/plain'\r\n    }\r\n});\r\n\r\n//immediately send record to user's remote DWNs\r\nconst {status} = await record.send(userDid);",
  "sendProtocolToRemoteDWNs": "const { protocol } = await web5.dwn.protocols.configure({\r\n    message: {\r\n        definition: protocolDefinition\r\n    }\r\n});\r\n\r\n//immediately send protocol to user's remote DWNs\r\nconst {status} = await protocol.send(userDid);",
  "sendRecordToDWNOfRecipient": "const { record } = await web5.dwn.records.create({\r\n    data: \"this record will be created but not saved to DWN\",\r\n    store: false, //remove this line if you want to keep a copy of the record in the sender's DWN\r\n    message: {\r\n        dataFormat: 'text/plain'\r\n    },\r\n});\r\n\r\n//send record to recipient's DWN\r\nconst {status} = await record.send(recipientDid);",
  "updateDwnRecord": "// Get the record\r\nconst { record } = await web5.dwn.records.read({\r\n  message: {\r\n    filter: {\r\n      recordId: createdRecord.id\r\n    }\r\n  }\r\n});\r\n\r\n// Update the record\r\n// highlight-next-line\r\nconst {status} = await record.update({ data: \"Hello, I'm updated!\" });",
  "createTextRecord": "const { record } = await web5.dwn.records.create({\r\n    data: 'Hello, Web5!',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });",
  "createJsonRecord": "// Create a JSON record\r\nconst { record } = await web5.dwn.records.create({\r\n    data: {\r\n        content: \"Hello Web5\",\r\n        description: \"Keep Building!\"\r\n    },\r\n    message: {\r\n        dataFormat: 'application/json'\r\n    }\r\n});",
  "uploadImage": "// Create a blob record\r\n    async function upload(event) {\r\n        const blob = new Blob(event.currentTarget.files, { type: \"image/png\" });\r\n        const { record } = await web5.dwn.records.create({\r\n            data: blob,\r\n            message: {\r\n                dataFormat: \"image/png\"\r\n            }\r\n        });\r\n        \r\n    }",
  "uploadFile": "// Create a file record\r\n    async function upload(event) {\r\n        const file = event.currentTarget.files[0];\r\n        const { status: fileStatus, record } = await web5.dwn.records.create({\r\n            data: file,\r\n            message: {\r\n                schema: \"https://schema.org/path/to/schema\",\r\n                dataFormat: \"application/octet-stream\"\r\n            }\r\n        });\r\n        \r\n    }",
  "createMixedRecord": "// Create a mixed record\r\n    async function createMessage(username, messageText, imageFile) {\r\n        let base64Image = null;\r\n        \r\n        if (imageFile) {\r\n            const binaryImage = await imageFile.arrayBuffer();\r\n            base64Image = btoa(\r\n                new Uint8Array(binaryImage).reduce(\r\n                    (data, byte) => data + String.fromCharCode(byte),\r\n                    \"\"\r\n                )\r\n            );\r\n        }\r\n\r\n        const messageData = {\r\n            username,\r\n            message: messageText,\r\n            image: base64Image\r\n        };\r\n\r\n        const { record } = await web5.dwn.records.create({\r\n            data: messageData,\r\n            message: {\r\n                schema: \"http://schema-registry.org/message\",\r\n                dataFormat: \"application/json\"\r\n            },\r\n        });\r\n        \r\n    }",
  "didCreate": "const { web5, did: aliceDid } = await Web5.connect();",
  "readTextRecord": "const readResult = await record.data.text();",
  "updateTextRecord": "const updateResult = await record.update({\r\n    data: 'Hello, Web5! I am updated.',\r\n  });",
  "deleteTextRecord": "const deleteResult = await web5.dwn.records.delete({\r\n    message: {\r\n      recordId: recordId\r\n    },\r\n  });"
}