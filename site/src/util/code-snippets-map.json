{
  "createMyDid": "const myDid = await web5.did.create('ion');",
  "configureProtocol": "const { status, protocol } = await web5.dwn.protocols.configure({\n    message: {\n      definition: protocolDefinition,\n    },\n  });\n\n  //highlight-start\n  const definitionResult = protocol.definition;\n  //highlight-end\n\n  console.log('resultStatus', definitionResult.protocol);",
  "configureProtocolAndSend": "const { status, protocol } = await web5.dwn.protocols.configure({\n    message: {\n      definition: protocolDefinition,\n    },\n  });\n\n  //highlight-start\n  await protocol.send(myDid);\n  //highlight-end",
  "queryProtocol": "const { protocols, status } = await web5.dwn.protocols.query({\n    message: {\n      filter: {\n        protocol: 'http://social-media.xyz',\n      },\n    },\n  });\n\n  //highlight-start\n  const protocolConfig = protocols[0].toJSON();\n  //highlight-end",
  "configureProtocolWithDefinition": "const { protocol, status } = await web5.dwn.protocols.configure({\n    message: {\n      definition: {\n        protocol: 'https://photos.org/protocol',\n        published: false,\n        types: {\n          album: {\n            schema: 'https://photos.org/protocol/album',\n            dataFormats: ['application/json'],\n          },\n          photo: {\n            schema: 'https://photos.org/protocols/photo',\n            dataFormats: ['application/json'],\n          },\n          binaryImage: {\n            dataFormats: ['image/png', 'jpeg', 'gif'],\n          },\n          comment: {\n            schema: 'https://photos.org/protocols/comment',\n            dataFormats: ['application/json'],\n          }\n        },\n        structure: {\n          album: {\n            $actions: [\n              {\n                //author of album can write\n                who: 'author',\n                of: 'album',\n                can: 'write'\n              },\n            ],\n          },\n          photo: {\n            $actions: [\n              {\n                //recipeint of photo can read\n                who: 'recipient',\n                of: 'photo',\n                can: 'read'                \n              },\n            ],\n            binaryImage: {\n              $actions: [\n                {\n                  //author of photo can write\n                  who: 'author',\n                  of: 'photo',\n                  can: 'write',\n                },\n              ],\n            },\n            comment: {\n              $actions: [\n                {\n                  //anyone can write a comment\n                  who: 'anyone',\n                  can: 'write',\n                },\n                {\n                  //anyone can read a comment\n                  who: 'anyone',\n                  can: 'read',\n                },                \n              ],\n            },            \n          },\n        },\n      },\n    },\n  });",
  "queryMusicProtocol": "const { protocols, status } = await web5.dwn.protocols.query({\n    message: {\n      filter: {\n        protocol: 'https://music.org/protocol',\n      },\n    },\n  });\n\n  // logs an array of protocol configurations installed on the user's DWN\n  console.log(protocols);",
  "queryProtocolDescending": "// Sorting protocols by dateCreated in descending order\n\n  const { protocols, status } = await web5.dwn.protocols.query({\n    message: {\n      filter: {\n        protocol: 'http://social-media.xyz',\n      },\n      //highlight-start\n      dateSort: 'createdDescending',\n      //highlight-end\n    },\n  });",
  "createRecord": "const { record } = await web5.dwn.records.create({\n    data: 'Hello World!',\n    message: {\n      dataFormat: 'text/plain',\n    },\n  });\n\n  const { status } = await record.send(myDid);",
  "deleteRecord": "const response = await record.delete();",
  "updateRecord": "const response = await record.update({ data: \"Hello', I'm updated\" });",
  "createRecordsWithPlaylist": "const { record } = await web5.dwn.records.create({\n    data: playlistJson,\n    message: {\n      recipient: 'did:example:alice',\n      schema: 'https://schema.org/Playlist',\n      dataFormat: 'application/json',\n    },\n  });",
  "createRecordWithoutStore": "// this creates a record, but does not store it in the user's local DWN\n  const { record } = await web5.dwn.records.create({\n    //highlight-start\n    store: false,\n    //highlight-end\n    data: 'Hello again, World!',\n    message: {\n      recipient: 'did:example:alice',\n      dataFormat: 'text/plain',\n    },\n  });",
  "createRecordAndSend": "// this creates a record and stores it in the user's local DWN\n  const { record } = await web5.dwn.records.create({\n    data: 'Hello World!',\n    message: {\n      dataFormat: 'text/plain',\n    },\n  });\n\n  /* \nsend the record to the user's remote DWNs. Only needed \nif it's a record that cannot wait for sync to occur.\n*/\n  const { status: myDidStatus } = await record.send(myDid);\n\n  // send the newly generated record to Bob's DWNs\n  const { status: bobStatus } = await record.send(bobDid);",
  "queryPlaylistFromDid": "const response = await web5.dwn.records.query({\n    from: myDid,\n    message: {\n      filter: {\n        schema: 'https://schema.org/Playlist',\n        dataFormat: 'application/json',\n      },\n    },\n  });\n\n  response.records.forEach((record) => {\n    console.log(record.id);\n  });",
  "readRecordFromRecordId": "// Reads the indicated record from the user's DWNs\n  let { record } = await web5.dwn.records.read({\n    message: {\n      recordId: recordId,\n    },\n  });\n\n  // assuming the record is a text payload, logs the text\n  console.log(record);",
  "deleteRecordFromDid": "const response = await web5.dwn.records.delete({\n    from: did,\n    message: {\n      recordId: record.id,\n    },\n  });",
  "createDidWithDWNEndpoint": "const {\n    web5,\n    did: myDid,\n    status,\n  } = await Web5.connect({\n    techPreview: {\n      dwnEndpoints: ['https://dwn.your-domain.org/'],\n    },\n  });",
  "getProtocolDefinition": "const { status, protocol } = await web5.dwn.protocols.configure({\n    message: {\n      definition: protocolDefinition,\n    },\n  });\n\n  const",
  "sendDefinition": "const { protocol } = await web5.dwn.protocols.configure({\n    message: {\n      definition: protocolDefinition,\n    },\n  });\n\n  await protocol.send(myDid);",
  "createRecordWithTodoItem": "const myRecord = await web5.dwn.records.create(myDid.id, {\n    data: 'todoItem',\n    message: {\n      dataFormat: 'text/plain',\n    },\n  });",
  "createAliceDid": "const { web5, did: aliceDid } = await Web5.connect();\n\n  // Create the record\n  const { record } = await web5.dwn.records.create({\n    data: 'Hello Web5',\n    message: {\n      dataFormat: 'text/plain',\n    },\n  });\n\n  // Read the record\n  const readResult = await record.data.text();",
  "createDidManually": "const myDid = await Web5.did.create('ion');",
  "createDidAutomatically": "const { web5, did: myDid } = await Web5.connect();",
  "queryProtocolsForMusic": "const { protocols } = await web5.dwn.protocols.query({\n    message: {\n      filter: {\n        protocol: 'https://music.org/protocol',\n      },\n    },\n  });",
  "queryProtocolsWithFilterDescending": "const { protocols } = await web5.dwn.protocols.query({\n    message: {\n      filter: {\n        protocol: 'http://social-media.xyz',\n      },\n      //highlight-start\n      dateSort: 'createdDescending',\n      //highlight-end\n    },\n  });",
  "queryRecordsWithFilterAscending": "const response = await web5.dwn.records.query({\n    message: {\n      filter: {\n        dataFormat: 'text/plain',\n      },\n      dateSort: 'publishedAscending',\n    },\n  });",
  "queryRecordsFromDID": "const { records } = await web5.dwn.records.query({\n    from: did,\n    message: {\n      filter: {\n        schema: 'https://schema.org/Playlist',\n        dataFormat: 'application/json',\n      },\n    },\n  });",
  "queryRecordWithParentId": "const response = await web5.dwn.records.query({\n    message: {\n      filter: {\n        parentId: 'bafyreianzpmhbgcgam5mys722vnsiuwn7y4ek6kjeyjptttquasw4hge2m',\n      },\n    },\n  });",
  "didCreate": "const { web5, did: aliceDid } = await Web5.connect();",
  "createTextRecord": "const { record } = await web5.dwn.records.create({\n    data: 'Hello, Web5!',\n    message: {\n      dataFormat: 'text/plain',\n    },\n  });",
  "readTextRecord": "const readResult = await record.data.text();",
  "updateTextRecord": "const updateResult = await record.update({\n    data: 'Hello, Web5! I am updated.',\n  });",
  "deleteTextRecord": "const deleteResult = await record.delete();"
}