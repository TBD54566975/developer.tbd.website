{
  "createMyDid": "const myDid = await web5.did.create('ion');",
  "configureProtocol": "const { status, protocol } = await web5.dwn.protocols.configure({\r\n    message: {\r\n      definition: protocolDefinition,\r\n    },\r\n  });\r\n\r\n  //highlight-start\r\n  const definitionResult = protocol.definition;\r\n  //highlight-end\r\n\r\n  console.log('resultStatus', definitionResult.protocol);",
  "configureProtocolAndSend": "const { status, protocol } = await web5.dwn.protocols.configure({\r\n    message: {\r\n      definition: protocolDefinition,\r\n    },\r\n  });\r\n\r\n  //highlight-start\r\n  await protocol.send(myDid);\r\n  //highlight-end",
  "queryProtocol": "const { protocols, status } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'http://social-media.xyz',\r\n      },\r\n    },\r\n  });\r\n\r\n  //highlight-start\r\n  const protocolConfig = protocols[0].toJSON();\r\n  //highlight-end",
  "configureProtocolWithDefinition": "const { protocol, status } = await web5.dwn.protocols.configure({\r\n    message: {\r\n      definition: {\r\n        protocol: 'https://photos.org/protocol',\r\n        published: false,\r\n        types: {\r\n          album: {\r\n            schema: 'https://photos.org/protocol/album',\r\n            dataFormats: ['application/json'],\r\n          },\r\n          photo: {\r\n            schema: 'https://photos.org/protocols/photo',\r\n            dataFormats: ['application/json'],\r\n          },\r\n          binaryImage: {\r\n            dataFormats: ['image/png', 'jpeg', 'gif'],\r\n          },\r\n          comment: {\r\n            schema: 'https://photos.org/protocols/comment',\r\n            dataFormats: ['application/json'],\r\n          },\r\n        },\r\n        structure: {\r\n          album: {\r\n            $actions: [\r\n              {\r\n                //author of album can write\r\n                who: 'author',\r\n                of: 'album',\r\n                can: 'write',\r\n              },\r\n            ],\r\n          },\r\n          photo: {\r\n            $actions: [\r\n              {\r\n                //recipeint of photo can read\r\n                who: 'recipient',\r\n                of: 'photo',\r\n                can: 'read',\r\n              },\r\n            ],\r\n            binaryImage: {\r\n              $actions: [\r\n                {\r\n                  //author of photo can write\r\n                  who: 'author',\r\n                  of: 'photo',\r\n                  can: 'write',\r\n                },\r\n              ],\r\n            },\r\n            comment: {\r\n              $actions: [\r\n                {\r\n                  //anyone can write a comment\r\n                  who: 'anyone',\r\n                  can: 'write',\r\n                },\r\n                {\r\n                  //anyone can read a comment\r\n                  who: 'anyone',\r\n                  can: 'read',\r\n                },\r\n              ],\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });",
  "queryMusicProtocol": "const { protocols, status } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'https://music.org/protocol',\r\n      },\r\n    },\r\n  });\r\n\r\n  // logs an array of protocol configurations installed on the user's DWN\r\n  console.log(protocols);",
  "queryProtocolDescending": "// Sorting protocols by dateCreated in descending order\r\n\r\n  const { protocols, status } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'http://social-media.xyz',\r\n      },\r\n      //highlight-start\r\n      dateSort: 'createdDescending',\r\n      //highlight-end\r\n    },\r\n  });",
  "queryProtocolsFromDid": "const { protocols } = await web5.dwn.protocols.query({\r\n    //highlight-start\r\n    from: bobDid,\r\n    //highlight-end\r\n    message: {\r\n      filter: {\r\n        protocol: 'https://music.org/protocol',\r\n      },\r\n    },\r\n  });\r\n\r\n  // logs an array of protocol configurations installed on Bob's DWN\r\n  console.log(protocols);",
  "createRecord": "const { record } = await web5.dwn.records.create({\r\n    data: 'Hello World!',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });\r\n\r\n  const { status } = await record.send(myDid);",
  "deleteRecord": "const response = await record.delete();",
  "updateRecord": "const response = await record.update({ data: \"Hello', I'm updated\" });",
  "createRecordsWithPlaylist": "const { record } = await web5.dwn.records.create({\r\n    data: playlistJson,\r\n    message: {\r\n      recipient: 'did:example:alice',\r\n      schema: 'https://schema.org/Playlist',\r\n      dataFormat: 'application/json',\r\n    },\r\n  });",
  "createRecordWithoutStore": "// this creates a record, but does not store it in the user's local DWN\r\n  const { record } = await web5.dwn.records.create({\r\n    //highlight-start\r\n    store: false,\r\n    //highlight-end\r\n    data: 'Hello again, World!',\r\n    message: {\r\n      recipient: 'did:example:alice',\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });",
  "createRecordAndSend": "// this creates a record and stores it in the user's local DWN\r\n  const { record } = await web5.dwn.records.create({\r\n    data: 'Hello World!',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });\r\n\r\n  /* \r\nsend the record to the user's remote DWNs. Only needed \r\nif it's a record that cannot wait for sync to occur.\r\n*/\r\n  const { status: myDidStatus } = await record.send(myDid);\r\n\r\n  // send the newly generated record to Bob's DWNs\r\n  const { status: bobStatus } = await record.send(bobDid);",
  "queryPlaylistFromDid": "const response = await web5.dwn.records.query({\r\n    from: myDid,\r\n    message: {\r\n      filter: {\r\n        schema: 'https://schema.org/Playlist',\r\n        dataFormat: 'application/json',\r\n      },\r\n    },\r\n  });\r\n\r\n  response.records.forEach((record) => {\r\n    console.log(record.id);\r\n  });",
  "readRecordFromRecordId": "// Reads the indicated record from the user's DWNs\r\n  let { record } = await web5.dwn.records.read({\r\n    message: {\r\n      recordId: recordId,\r\n    },\r\n  });\r\n\r\n  // assuming the record is a text payload, logs the text\r\n  console.log(record);",
  "deleteRecordFromDid": "const response = await web5.dwn.records.delete({\r\n    from: did,\r\n    message: {\r\n      recordId: record.id,\r\n    },\r\n  });",
  "createDidWithDWNEndpoint": "const {\r\n    web5,\r\n    did: myDid,\r\n    status,\r\n  } = await Web5.connect({\r\n    techPreview: {\r\n      dwnEndpoints: ['https://dwn.your-domain.org/'],\r\n    },\r\n  });",
  "getProtocolDefinition": "const { status, protocol } = await web5.dwn.protocols.configure({\r\n    message: {\r\n      definition: protocolDefinition,\r\n    },\r\n  });\r\n\r\n  const",
  "sendDefinition": "const { protocol } = await web5.dwn.protocols.configure({\r\n    message: {\r\n      definition: protocolDefinition,\r\n    },\r\n  });\r\n\r\n  await protocol.send(myDid);",
  "createRecordWithTodoItem": "const myRecord = await web5.dwn.records.create(myDid.id, {\r\n    data: 'todoItem',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });",
  "createAliceDid": "const { web5, did: aliceDid } = await Web5.connect();\r\n\r\n  // Create the record\r\n  const { record } = await web5.dwn.records.create({\r\n    data: 'Hello Web5',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });\r\n\r\n  // Read the record\r\n  const readResult = await record.data.text();",
  "createDidManually": "const myDid = await Web5.did.create('ion');",
  "createDidAutomatically": "const { web5, did: myDid } = await Web5.connect();",
  "queryProtocolsForMusic": "const { protocols } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'https://music.org/protocol',\r\n      },\r\n    },\r\n  });",
  "queryProtocolsWithFilterDescending": "const { protocols } = await web5.dwn.protocols.query({\r\n    message: {\r\n      filter: {\r\n        protocol: 'http://social-media.xyz',\r\n      },\r\n      //highlight-next-line\r\n      dateSort: 'createdDescending'\r\n    },\r\n  });",
  "queryRecordsWithFilterAscending": "const response = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        dataFormat: 'text/plain',\r\n      },\r\n      //highlight-next-line\r\n      dateSort: 'publishedAscending',\r\n    },\r\n  });",
  "queryRecordsFromDID": "const { records } = await web5.dwn.records.query({\r\n    from: did,\r\n    message: {\r\n      filter: {\r\n        schema: 'https://schema.org/Playlist',\r\n        dataFormat: 'application/json',\r\n      },\r\n    },\r\n  });",
  "queryRecordWithParentId": "const response = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        parentId: 'bafyreianzpmhbgcgam5mys722vnsiuwn7y4ek6kjeyjptttquasw4hge2m',\r\n      },\r\n    },\r\n  });",
  "playlistProtocolDefinition": "const playlistProtocolDefinition =  {\r\n    protocol: \"https://playlist.org/protocol\",\r\n    published: true,\r\n    types: {\r\n      playlist: {\r\n        schema: \"https://schema.org/MusicPlaylist\",\r\n        dataFormats: [\"application/json\"],\r\n      },\r\n      audio: {\r\n        schema: \"https://schema.org/AudioObject\",\r\n        dataFormats: [\"audio/mp3\"],\r\n      },\r\n      video: {\r\n        schema: \"https://schema.org/VideoObject\",\r\n        dataFormats: [\"video/mp4\"],\r\n      },\r\n    },\r\n    structure: {\r\n      playlist: {\r\n        $actions: [\r\n          { who: \"anyone\", can: \"write\" },\r\n          { who: \"author\", of: \"playlist\", can: \"read\" },\r\n          { who: \"recipient\", of: \"playlist\", can: \"read\" },\r\n        ],\r\n        audio: {\r\n          $actions: [\r\n            { who: \"anyone\", can: \"write\" },\r\n            { who: \"author\", of: \"audio\", can: \"read\" },\r\n            { who: \"recipient\", of: \"audio\", can: \"read\" },\r\n          ],\r\n        },\r\n        video: {\r\n          $actions: [\r\n            { who: \"anyone\", can: \"write\" },\r\n            { who: \"author\", of: \"video\", can: \"read\" },\r\n            { who: \"recipient\", of: \"video\", can: \"read\" },\r\n          ]\r\n        },\r\n      },\r\n    }\r\n  };",
  "queryFromDwnByProtocolPath": "const { records } = await web5.dwn.records.query({\r\n    message: {\r\n      filter: {\r\n        //highlight-start\r\n        protocol: 'https://playlist.org/protocol',\r\n        protocolPath: 'playlist/video'\r\n        //highlight-end\r\n      },\r\n    },\r\n  });",
  "didCreate": "const { web5, did: aliceDid } = await Web5.connect();",
  "createTextRecord": "const { record } = await web5.dwn.records.create({\r\n    data: 'Hello, Web5!',\r\n    message: {\r\n      dataFormat: 'text/plain',\r\n    },\r\n  });",
  "readTextRecord": "const readResult = await record.data.text();",
  "updateTextRecord": "const updateResult = await record.update({\r\n    data: 'Hello, Web5! I am updated.',\r\n  });",
  "deleteTextRecord": "const deleteResult = await record.delete();"
}